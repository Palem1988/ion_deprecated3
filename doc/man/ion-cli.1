.\" Manpage for ion-cli
.\" Contact ckti@mail.i2p to correct errors or typos.
.TH man 1 "30 Dec 2017" "1.0" "ion-cli man page"
.SH NAME
ion-cli \- run an ion CLI command
.SH SYNOPSIS
ion-cli [COMMAND] <OPTION>
.SH DESCRIPTION
ion-cli runs one of a number of CLI commands whilst the ion wallet is running. Set server=1 in ~/.ioncoin/ioncoin.conf if running ion-qt.
.SH OPTIONS
\fBaddmultisigaddress nrequired ["key",...] ( "account" )\fR

Add a nrequired-to-sign multisignature address to the wallet.
Each key is a Ion address or hex-encoded public key.
If 'account' is specified, assign address to that account.

Arguments:

1. nrequired (numeric, required) The number of required signatures out of the n keys or addresses.

2. "keysobject" (string, required) A json array of Ion addresses or hex-encoded public keys
     [
       "address"  (string) Ion address or hex-encoded public key
       ...,
     ]

3. "account" (string, optional) An account to assign the addresses to.

Result:

"ionaddress" (string) A Ion address associated with the keys.

Examples:

Add a multisig address from 2 addresses

\> ion-cli addmultisigaddress 2 "[\\"iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe\\"\\,\\"ThiLpx7oYd5YuuhsJAUD5ZsEX2YHgU98Us\\"]

As json rpc call

\> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "addmultisigaddress", "params": [2, "[\\"iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe\\"\\,\\"ThiLpx7oYd5YuuhsJAUD5ZsEX2YHgU98Us\\"]"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBaddnode <node> <add|remove|onetry>\fR

Attempts add or remove <node> from the addnode list or try a connection to <node> once.

\fBaddredeemscript <redeemScript> [account]\fR

Add a P2SH address with a specified redeemScript to the wallet.
If [account] is specified, assign address to [account].

\fBbackupwallet "destination"\fR

Safely copies wallet.dat to destination, which can be a directory or a path with filename.

Arguments:

1. "destination" (string) The destination directory or file

Examples:

> ion-cli backupwallet "backup.dat"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "backupwallet", "params": ["backup.dat"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBcheckkernel [{"txid":txid,"vout":n},...] [createblocktemplate=false]\fR

Check if one of given inputs is a kernel input at the moment.


\fBcheckwallet\fR

Check wallet for integrity.


\fBclearbanned\fR

Clear all banned IPs.

Examples:

> ion-cli clearbanned 
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "clearbanned", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBcreatemultisig nrequired ["key",...]\fR

Creates a multi-signature address with n signature of m keys required.
It returns a json object with the address and redeemScript.

Arguments:

1. nrequired (numeric, required) The number of required signatures out of the n keys or addresses.
2. "keys" (string, required) A json array of keys which are ion addresses or hex-encoded public keys
 [
 "key" (string) ion address or hex-encoded public key
 ,...
 ]

Result:

{
 "address":"multisigaddress", (string) The value of the new multisig address.
 "redeemScript":"script" (string) The string value of the hex-encoded redemption script.
}

Examples:

Create a multisig address from 2 addresses
> ion-cli createmultisig 2 "[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]"

As a json rpc call
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "createmultisig", "params": [2, "[\"16sSauSf5pF2UkUwvKGq4qjNRzBZYqgEL5\",\"171sgjn4YtPu27adkKGrdDwzRTxnRkBfKV\"]"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBcreaterawtransaction [{"txid":txid,"vout":n},...] {address:amount,...}\fR

Create a transaction spending given inputs
(array of objects containing transaction id and output number),
sending to given address(es).
Returns hex-encoded raw transaction.
Note that the transaction's inputs are not signed, and
it is not stored in the wallet or transmitted to the network.

\fBdecoderawtransaction <hex string>\fR

Return a JSON object representing the serialized, hex-encoded transaction.

\fBdecodescript <hex string>\fR

Decode a hex-encoded script.

\fBdumpprivkey <ionaddress>\fR

Reveals the private key corresponding to <ionaddress>.

\fBdumpwallet <filename>\fR

Dumps all wallet keys in a human-readable format.

\fBencryptwallet "passphrase"\fR

Encrypts the wallet with 'passphrase'. This is for first time encryption.
After this, any calls that interact with private keys such as sending or signing 
will require the passphrase to be set prior the making these calls.
Use the walletpassphrase call for this, and then walletlock call.
If the wallet is already encrypted, use the walletpassphrasechange call.
Note that this will shutdown the server.

Arguments:

1. "passphrase"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.

Examples:

Encrypt your wallet
> ion-cli encryptwallet "my pass phrase"

Now set the passphrase to use the wallet, such as for signing or sending Ion
> ion-cli walletpassphrase "my pass phrase"

Now we can so something like sign
> ion-cli signmessage "ionaddress" "test message"

Now lock the wallet again by removing the passphrase
> ion-cli walletlock 

As a json rpc call
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "encryptwallet", "params": ["my pass phrase"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBgetaccount "ionaddress"\fR

Returns the account associated with the given address.

Arguments:

1. "ionaddress"  (string, required) The Ion address for account lookup.

Result:

"accountname" (string) the account address

Examples:

> ion-cli getaccount "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaccount", "params": ["iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBgetaccountaddress "account"\fR

Returns the current Ion address for receiving payments to this account.

Arguments:

1. "account" (string, required) The account name for the address. It can also be set to the empty string "" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.

Result:

"ionaddress" (string) The account Ion address

Examples:

> ion-cli getaccountaddress 
> ion-cli getaccountaddress ""
> ion-cli getaccountaddress "myaccount"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getaccountaddress", "params": ["myaccount"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBgetaddednodeinfo <dns> [node]\fR

Returns information about the given added node, or all added nodes
(note that onetry addnodes are not listed here)
If dns is false, only a list of added nodes will be provided,
otherwise connected information will also be available.

\fBgetaddressesbyaccount "account"\fR

Returns the list of addresses for the given account.

Arguments:

1. "account" (string, required) The account name.

Result:

[                     (json array of string)
  "ionaddress"  (string) a Ion address associated with the given account
  ,...
]

Examples:

The total amount in the server across all accounts
> ion-cli getbalance 

The total amount in the server across all accounts, with at least 5 confirmations
> ion-cli getbalance "*" 6

The total amount in the default account with at least 1 confirmation
> ion-cli getbalance ""

The total amount in the account named tabby with at least 10 confirmations
> ion-cli getbalance "tabby" 10

As a json rpc call
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getbalance", "params": ["tabby", 10] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBgetbestblockhash\fR

Returns the hash of the best block in the longest block chain.

\fBgetblock <hash> [txinfo]\fR

txinfo optional to print more detailed tx info
Returns details of a block with given block-hash.

\fBgetblockbynumber <number> [txinfo]\fR

txinfo optional to print more detailed tx info
Returns details of a block with given block-number.

\fBgetblockcount\fR

Returns the number of blocks in the longest block chain.

\fBgetblockhash <index>\fR

Returns hash of block in best-block-chain at <index>.

\fBgetblocktemplate [params]\fR

Returns data needed to construct a block to work on:
  "version" : block version
  "previousblockhash" : hash of current highest block
  "transactions" : contents of non-coinbase transactions that should be included in the next block
  "coinbaseaux" : data that should be included in coinbase
  "coinbasevalue" : maximum allowable input to coinbase transaction, including the generation award and transaction fees
  "target" : hash target
  "mintime" : minimum timestamp appropriate for next block
  "curtime" : current timestamp
  "mutable" : list of ways the block template may be changed
  "noncerange" : range of valid nonces
  "sigoplimit" : limit of sigops in blocks
  "sizelimit" : limit of block size
  "bits" : compressed target of next block
  "height" : height of the next block
  "payee" : "xxx", (string) required payee for the next block
  "payee_amount" : n,  (numeric) required amount to pay
  "votes" : [
                     (array) show vote candidates
        { ... }                       (json object) vote candidate
        ,...
  ],
  "masternode_payments" : true|false, (boolean) true, if masternode payments are enabled  "enforce_masternode_payments" : true|false  (boolean) true, if masternode payments are enforcedSee https://en.bitcoin.it/wiki/BIP_0022 for full specification.

\fBgetcheckpoint\fR

Show info of synchronized checkpoint.

\fBgetconnectioncount\fR

Returns the number of connections to other nodes.

\fBgetdifficulty\fR

Returns an object containing various state info.

\fBgetmininginfo\fR

Returns an object containing mining-related information.

\fBgetnettotals\fR

Returns information about network traffic, including bytes in, bytes out,
and current time.

\fBgetnewaddress ( "account" )\fR

Returns a new Ion address for receiving payments.
If 'account' is specified (recommended), it is added to the address book 
so payments received with the address will be credited to 'account'.

Arguments:

1. "account" (string, optional) The account name for the address to be linked to. if not provided, the default account "" is used. It can also be set to the empty string "" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.

Result:

"ionaddress" (string) The new Ion address

Examples:

> ion-cli getnewaddress 
> ion-cli getnewaddress ""
> ion-cli getnewaddress "myaccount"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getnewaddress", "params": ["myaccount"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBgetnewpubkey [account]\fR

Returns new public key for coinbase generation.

\fBgetnewstealthaddress [label]\fR

Returns a new Ion stealth address for receiving payments anonymously.  

\fBgetpeerinfo\fR

Returns data about each connected network node.

\fBgetrawmempool\fR

Returns all transaction ids in memory pool.

\fBgetrawtransaction <txid> [verbose=0]\fR

If verbose=0, returns a string that is
serialized, hex-encoded data for <txid>.
If verbose is non-zero, returns an Object
with information about <txid>.

getreceivedbyaccount "account" ( minconf )

Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.

Arguments:

1. "account" (string, required) The selected account, may be the default account using "".
2. minconf (numeric, optional, default=1) Only include transactions confirmed at least this many times.

Result:

amount (numeric) The total amount in ION received for this account.

Examples:

Amount received by the default account with at least 1 confirmation
> ion-cli getreceivedbyaccount ""

Amount received at the tabby account including unconfirmed amounts with zero confirmations
> ion-cli getreceivedbyaccount "tabby" 0

The amount with at least 10 confirmation, very safe
> ion-cli getreceivedbyaccount "tabby" 10

As a json rpc call
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getreceivedbyaccount", "params": ["tabby", 10] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBgetreceivedbyaddress "ionaddress" ( minconf )\fR

Returns the total amount received by the given ionaddress in transactions with at least minconf confirmations.

Arguments:

1. "ionaddress"  (string, required) The Ion address for transactions.
2. minconf (numeric, optional, default=1) Only include transactions confirmed at least this many times.

Result:

amount (numeric) The total amount in ION received at this address.

Examples:

The amount from transactions with at least 1 confirmation
> ion-cli getreceivedbyaddress "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe"

The amount including unconfirmed transactions, zero confirmations
> ion-cli getreceivedbyaddress "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe" 0

The amount with at least 10 confirmation, very safe
> ion-cli getreceivedbyaddress "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe" 10

As a json rpc call
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "getreceivedbyaddress", "params": ["iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe", 10] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBgetstakesubsidy <hex string>\fR

Returns proof-of-stake subsidy value for the specified coinstake.

\fBgetstakinginfo\fR

Returns an object containing staking-related information.

\fBgetsubsidy [nTarget]\fR

Returns proof-of-work subsidy value for the specified value of target.

Get detailed information about in-wallet transaction <txid>

Arguments:

1. "txid" (string, required) The transaction id
2. "includeWatchonly" (bool, optional, default=false) Whether to include watchonly addresses in balance calculation and details[]

Result:

{
  "amount" : x.xxx,         (numeric) The transaction amount in ion
  "confirmations" : n,      (numeric) The number of confirmations
  "bcconfirmations" : n,    (numeric) The number of Blockchain confirmations
  "blockhash" : "hash",     (string) The block hash
  "blockindex" : xx,        (numeric) The block index
  "blocktime" : ttt,        (numeric) The time in seconds since epoch (1 Jan 1970 GMT)
  "txid" : "transactionid", (string) The transaction id.
  "time" : ttt,             (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)
  "timereceived" : ttt,     (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)
  "details" : [
    {
      "account" : "accountname", (string) The account name involved in the transaction, can be "" for the default account.
      "address" : "ionaddress", (string) The Ion address involved in the transaction
      "category" : "send|receive", (string) The category, either 'send' or 'receive'
      "amount" : x.xxx (numeric) The amount in ion
    }
    ,...
  ],
  "hex" : "data" (string) Raw data for transaction
}

bxamples
> ion-cli gettransaction "1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "gettransaction", "params": ["1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBgetwork [data]\fR

If [data] is not specified, returns formatted hash data to work on:
  "midstate" : precomputed hash state after hashing the first half of the data (DECATED)


  "data" : block data
  "hash1" : formatted hash buffer for second hash (DECATED)


  "target" : little endian hash target
If [data] is specified, tries to solve the block and returns true if it was successful.

\fBgetworkex [data, coinbase]\fR

If [data, coinbase] is not specified, returns extended work data.


\fBhelp [command]\fR

List commands, or get help for a command.

\fBimportaddress "address" ( "label" rescan )\fR

Adds an address or script (in hex) that can be watched as if it were in your wallet but cannot be used to spend.

Arguments:

1. "address" (string, required) The address
2. "label" (string, optional, default="") An optional label
3. rescan (boolean, optional, default=true) Rescan the wallet for transactions

Note: This call can take minutes to complete if rescan is true.

Examples:

Import an address with rescan
> ion-cli importaddress "myaddress"

Import using a label without rescan
> ion-cli importaddress "myaddress" "testing" false

As a JSON-RPC call
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "importaddress", "params": ["myaddress", "testing", false] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBimportprivkey <ionprivkey> [label] [rescan=true]\fR

Adds a private key (as returned by dumpprivkey) to your wallet.

\fBimportstealthaddress <scan_secret> <spend_secret> [label]\fR

Import an owned stealth addresses.

\fBimportwallet <filename>\fR

Imports keys from a wallet dump file (see dumpwallet).

\fBkeypoolrefill ( newsize )\fR

Fills the keypool.

Arguments

1. newsize (numeric, optional, default=1000) The new keypool size

Examples:

> ion-cli keypoolrefill 
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "keypoolrefill", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBlistaccounts ( minconf includeWatchonly)\fR

Returns Object that has account names as keys, account balances as values.

Arguments:

1. minconf (numeric, optional, default=1) Only onclude transactions with at least this many confirmations
2. includeWatchonly (bool, optional, default=false) Include balances in watchonly addresses (see 'importaddress')

Result:

{                      (json object where keys are account names, and values are numeric balances
  "account": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.
  ...
}

Examples:

List account balances where there at least 1 confirmation
> ion-cli listaccounts 

List account balances including zero confirmation transactions
> ion-cli listaccounts 0

List account balances for 10 or more confirmations
> ion-cli listaccounts 10

As json rpc call
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listaccounts", "params": [10] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBlistaddressgroupings\fR

Lists groups of addresses which have had their common ownership
made public by common use as inputs or as the resulting change
in past transactions

Result:

[
  [
    [
      "ionaddress",     (string) The Ion address
      amount,                 (numeric) The amount in ion
      "account"             (string, optional) The account
    ]
    ,...
  ]
  ,...
]

Examples:

> ion-cli listaddressgroupings 
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listaddressgroupings", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBlistbanned\fR

List all banned IPs/Subnets.

Examples:

> ion-cli listbanned 
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listbanned", "params": [] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBlistreceivedbyaccount ( minconf includeempty includeWatchonly)\fR

List balances by account.

Arguments:

1. minconf (numeric, optional, default=1) The minimum number of confirmations before payments are included.
2. includeempty (boolean, optional, default=false) Whether to include accounts that haven't received any payments.
3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').

Result:

[
  {
    "involvesWatchonly" : "true",    (bool) Only returned if imported addresses were involved in transaction
    "account" : "accountname",  (string) The account name of the receiving account
    "amount" : x.xxx,             (numeric) The total amount received by addresses with this account
    "confirmations" : n           (numeric) The number of confirmations of the most recent transaction included
    "bcconfirmations" : n         (numeric) The number of Blockchain confirmations of the most recent transaction included
  }
  ,...
]

Examples:

> ion-cli listreceivedbyaccount 
> ion-cli listreceivedbyaccount 10 true
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listreceivedbyaccount", "params": [10, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBlistreceivedbyaddress ( minconf includeempty includeWatchonly)\fR

List balances by receiving address.

Arguments:

1. minconf (numeric, optional, default=1) The minimum number of confirmations before payments are included.
2. includeempty  (numeric, optional, default=false) Whether to include addresses that haven't received any payments.
3. includeWatchonly (bool, optional, default=false) Whether to include watchonly addresses (see 'importaddress').

Result:

[
  {
    "involvesWatchonly" : "true",    (bool) Only returned if imported addresses were involved in transaction
    "address" : "receivingaddress",  (string) The receiving address
    "account" : "accountname",       (string) The account of the receiving address. The default account is "".
    "amount" : x.xxx,                  (numeric) The total amount in ION received by the address
    "confirmations" : n                (numeric) The number of confirmations of the most recent transaction included
    "bcconfirmations" : n              (numeric) The number of Blockchain confirmations of the most recent transaction included
  }
  ,...
]

Examples:

> ion-cli listreceivedbyaddress 
> ion-cli listreceivedbyaddress 10 true
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listreceivedbyaddress", "params": [10, true, true] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBlistsinceblock ( "blockhash" target-confirmations includeWatchonly)\fR

Get all transactions in blocks since block [blockhash], or all transactions if omitted

Arguments:

1. "blockhash" (string, optional) The block hash to list transactions since
2. target-confirmations: (numeric, optional) The confirmations required, must be 1 or more
3. includeWatchonly: (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')
Result:

{
  "transactions": [
    "account":"accountname", (string) The account name associated with the transaction. Will be "" for the default account.
    "address":"ionaddress", (string) The Ion address of the transaction. Not present for move transactions (category = move).
    "category":"send|receive", (string) The transaction category. 'send' has negative amounts, 'receive' has positive amounts.
    "amount": x.xxx, (numeric) The amount in ION. This is negative for the 'send' category, and for the 'move' category for moves outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.
@                                                           
    "fee": x.xxx, (numeric) The amount of the fee in ion. This is negative and only available for the 'send' category of transactions.
    "confirmations": n, (numeric) The number of confirmations for the transaction. Available for 'send' and 'receive' category of transactions.
    "bcconfirmations" : n, (numeric) The number of Blockchain confirmations for the transaction. Available for 'send' and 'receive' category of transactions.
    "blockhash": "hashvalue", (string) The block hash containing the transaction. Available for 'send' and 'receive' category of transactions.
    "blockindex": n, (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.
    "blocktime": xxx, (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).
    "txid": "transactionid", (string) The transaction id. Available for 'send' and 'receive' category of transactions.
    "time": xxx, (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).
    "timereceived": xxx, (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.
    "comment": "...", (string) If a comment is associated with the transaction.
    "to": "...", (string) If a comment to is associated with the transaction.
  ],
  "lastblock": "lastblockhash" (string) The hash of the last block
}

Examples:

> ion-cli listsinceblock 
> ion-cli listsinceblock "000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad" 10
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listsinceblock", "params": ["000000000000000bacf66f7497b7dc45ef753ee9a7d38571037cdb1a57f663ad", 10] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBliststealthaddresses [show_secrets=0]\fR

List owned stealth addresses.

\fBlisttransactions ( "account" count from includeWatchonly)\fR

Returns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.

Arguments:

1. "account" (string, optional) The account name. If not included, it will list all transactions for all accounts.
   If "" is set, it will list transactions for the default account.
2. count (numeric, optional, default=10) The number of transactions to return
3. from (numeric, optional, default=0) The number of transactions to skip
4. includeWatchonly (bool, optional, default=false) Include transactions to watchonly addresses (see 'importaddress')

Result:

[
  {
    "account":"accountname", (string) The account name associated with the transaction. It will be "" for the default account.
    "address":"ionaddress", (string) The Ion address of the transaction. Not present for move transactions (category = move).
    "category":"send|receive|move", (string) The transaction category. 'move' is a local (off blockchain) transaction between accounts, and not associated with an address,transaction id or block. 'send' and 'receive' transactions are associated with an address, transaction id and block details
    "amount": x.xxx, (numeric) The amount in ION. This is negative for the 'send' category, and for the'move' category for moves outbound. It is positive for the 'receive' category, and for the 'move' category for inbound funds.
    "fee": x.xxx,             (numeric) The amount of the fee in ion. This is negative and only available for the 
                                         'send' category of transactions.
    "confirmations": n,       (numeric) The number of confirmations for the transaction. Available for 'send' and 
                                         'receive' category of transactions.
    "bcconfirmations": n,     (numeric) The number of Blcokchain confirmations for the transaction. Available for 'send'
                                          and 'receive' category of transactions.
    "blockhash": "hashvalue", (string) The block hash containing the transaction. Available for 'send' and 'receive'
                                          category of transactions.
    "blockindex": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'
                                          category of transactions.
    "txid": "transactionid", (string) The transaction id. Available for 'send' and 'receive' category of transactions.
    "time": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).
    "timereceived": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available 
                                          for 'send' and 'receive' category of transactions.
    "comment": "...",       (string) If a comment is associated with the transaction.
    "otheraccount": "accountname",  (string) For the 'move' category of transactions, the account the funds came 
                                          from (for receiving funds, positive amounts), or went to (for sending funds,
                                          negative amounts).
  }
]

Examples:

List the most recent 10 transactions in the systems
> ion-cli listtransactions 

List the most recent 10 transactions for the tabby account
> ion-cli listtransactions "tabby"

List transactions 100 to 120 from the tabby account
> ion-cli listtransactions "tabby" 20 100

As a json rpc call
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "listtransactions", "params": ["tabby", 20, 100] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBlistunspent [minconf=1] [maxconf=9999999]  ["address",...]\fR

Returns array of unspent transaction outputs
with between minconf and maxconf (inclusive) confirmations.
Optionally filtered to only include txouts paid to specified addresses.
Results are an array of Objects, each of which has:
{txid, vout, scriptPubKey, amount, confirmations}

\fBmakekeypair [prefix]\fR

Make a public/private key pair.
[prefix] is optional preferred prefix for the public key.


\fBmasternode "command"... ( "passphrase" )\fR

Set of commands to execute masternode related actions

Arguments:

1. "command"        (string or set of strings, required) The command to execute
2. "passphrase"     (string, optional) The wallet passphrase

Available commands:
  count        - Print number of all known masternodes (optional: 'enabled', 'both')
  current      - Print info on current masternode winner
  debug        - Print masternode status
  genkey       - Generate new masternodeprivkey
  enforce      - Enforce masternode payments
  list         - Print list of all known masternodes (see masternodelist for more info)
  list-conf    - Print masternode.conf in JSON format
  outputs      - Print masternode compatible outputs
  start        - Start masternode configured in ioncoin.conf
  start-alias  - Start single masternode by assigned alias configured in masternode.conf
  start-many   - Start all masternodes configured in masternode.conf
  status       - Print masternode status information
  stop         - Stop masternode configured in ioncoin.conf
  stop-alias   - Stop single masternode by assigned alias configured in masternode.conf
  stop-many    - Stop all masternodes configured in masternode.conf
  winners      - Print list of masternode winners
  vote-many    - Vote on a Ion initiative
  vote         - Vote on a Ion initiative


\fBmasternodelist ( "mode" "filter" )\fR

Get a list of masternodes in different modes

Arguments:

1. "mode"      (string, optional/required to use filter, defaults = status) The mode to run list in
2. "filter"    (string, optional) Filter results. Partial match by IP by default in all modes, additional matches in some modes

Available modes:
  activeseconds  - Print number of seconds masternode recognized by the network as enabled
  donation       - Show donation settings
  full           - Print info in format 'status protocol pubkey vin lastseen activeseconds' (can be additionally filtered, partial match)
  lastseen       - Print timestamp of when a masternode was last seen on the network
  protocol       - Print protocol of a masternode (can be additionally filtered, exact match)
  pubkey         - Print public key associated with a masternode (can be additionally filtered, partial match)
  rank           - Print rank of a masternode based on current block
  status         - Print masternode status: ENABLED / EXPD / VIN_SPENT /MOVE / POS_ERROR (can be additionally filtered, partial match)


  addr            - Print ip address associated with a masternode (can be additionally filtered, partial match)
  votes          - Print all masternode votes for a Ion initiative (can be additionally filtered, partial match)
  lastpaid       - The last time a node was paid on the network


\fBmove "fromaccount" "toaccount" amount ( minconf "comment" )\fR

Requests that a ping be sent to all other nodes, to measure ping time.
Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.
Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.

\fBrepairwallet\fR


Repair wallet if checkwallet reports any problem.


\fBresendtx\fR


Re-send unconfirmed transactions.


\fBreservebalance [<reserve> [amount]]\fR


<reserve> is true or false to turn balance reserve on or off.
<amount> is a real and rounded to cent.
Set reserve amount not participating in network protection.
If no parameters provided current setting is printed.


\fBscanforalltxns [fromHeight]\fR


Scan blockchain for owned transactions.

\fBscanforstealthtxns [fromHeight]\fR


\fBsearchrawtransactions <address> [verbose=1] [skip=0] [count=100]\fR

\fBsendalert <message> <privatekey> <minver> <maxver> <priority> <id> [cancelupto]\fR


<message> is the alert text message
<privatekey> is hex string of alert master private key
<minver> is the minimum applicable internal client version
<maxver> is the maximum applicable internal client version
<priority> is integer priority number
<id> is the alert id
[cancelupto] cancels all alert id's up to this number
Returns true or false.

\fBsendfrom "fromaccount" "toionaddress" amount ( minconf "comment" "comment-to" )\fR


Sent an amount from an account to a Ion address.
The amount is a real and is rounded to the nearest 0.00000001.

Arguments:

1. "fromaccount"       (string, required) The name of the account to send funds from. May be the default account using "".
2. "toionaddress"  (string, required) The Ion address to send funds to.
3. amount                (numeric, required) The amount in ION. (transaction fee is added on top).
4. minconf               (numeric, optional, default=1) Only use funds with at least this many confirmations.
5. "comment"           (string, optional) A comment used to store what the transaction is for. 
                                     This is not part of the transaction, just kept in your wallet.
6. "comment-to"        (string, optional) An optional comment to store the name of the person or organization 
                                     to which you're sending the transaction. This is not part of the transaction, 
                                     it is just kept in your wallet.

Result:

"transactionid"        (string) The transaction id.

Examples:

Send 0.01 ION from the default account to the address, must have at least 1 confirmation
> ion-cli sendfrom "" "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe" 0.01

Send 0.01 from the tabby account to the given address, funds must have at least 10 confirmations
> ion-cli sendfrom "tabby" "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe" 0.01 10 "donation" "seans outpost"

As a json rpc call
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendfrom", "params": ["tabby", "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe", 0.01, 10, "donation", "seans outpost"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBsendmany "fromaccount" {"address":amount,...} ( minconf "comment" )\fR


Send multiple times. Amounts are double-precision floating point numbers.

Arguments:

1. "fromaccount"         (string, required) The account to send the funds from, can be "" for the default account
2. "amounts"             (string, required) A json object with addresses and amounts
    {
      "address":amount   (numeric) The Ion address is the key, the numeric amount in ION is the value
      ,...
    }
3. minconf                 (numeric, optional, default=1) Only use the balance confirmed at least this many times.
4. "comment"             (string, optional) A comment

Result:

"transactionid"          (string) The transaction id for the send. Only 1 transaction is created regardless of 
                                    the number of addresses.

Examples:

Send two amounts to two different addresses:
> ion-cli sendmany "tabby" "{\"iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe\":0.01,\"ThiLpx7oYd5YuuhsJAUD5ZsEX2YHgU98Us\":0.02}"

Send two amounts to two different addresses setting the confirmation and comment:
> ion-cli sendmany "tabby" "{\"iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe\":0.01,\"ThiLpx7oYd5YuuhsJAUD5ZsEX2YHgU98Us\":0.02}" 10 "testing"

As a json rpc call
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendmany", "params": ["tabby", "{\"iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe\":0.01,\"ThiLpx7oYd5YuuhsJAUD5ZsEX2YHgU98Us\":0.02}", 10, "testing"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBsendrawtransaction <hex string>\fR


Submits raw transaction (serialized, hex-encoded) to local node and network.

\fBsendtoaddress "ionaddress" amount ( "comment" "comment-to" )\fR

Sent an amount to a given address. The amount is a real and is rounded to the nearest 0.00000001

Arguments:

1. "ionaddress"  (string, required) The Ion address to send to.
2. "amount"      (numeric, required) The amount in ION to send. eg 0.1
3. "comment"     (string, optional) A comment used to store what the transaction is for. 
                             This is not part of the transaction, just kept in your wallet.
4. "comment-to"  (string, optional) A comment to store the name of the person or organization 
                             to which you're sending the transaction. This is not part of the 
                             transaction, just kept in your wallet.

Result:

"transactionid"  (string) The transaction id.

Examples:

> ion-cli sendtoaddress "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe" 0.1
> ion-cli sendtoaddress "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe" 0.1 "donation" "seans outpost"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "sendtoaddress", "params": ["iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe", 0.1, "donation", "seans outpost"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBsendtostealthaddress <stealth_address> <amount> [comment] [comment-to] [narration]\fR

<amount> is a real and is rounded to the nearest 0.000001

\fBsetaccount "ionaddress" "account"\fR

Sets the account associated with the given address.

Arguments:

1. "ionaddress"  (string, required) The Ion address to be associated with an account.
2. "account"         (string, required) The account to assign the address to.

Examples:

> ion-cli setaccount "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe" "tabby"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setaccount", "params": ["iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe", "tabby"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBsetban "ip(/netmask)" "add|remove" (bantime) (absolute)\fR


Attempts add or remove a IP/Subnet from the banned list.

Arguments:

1. "ip(/netmask)" (string, required) The IP/Subnet (see getpeerinfo for nodes ip) with a optional netmask (default is /32 = single ip)
2. "command"      (string, required) 'add' to add a IP/Subnet to the list, 'remove' to remove a IP/Subnet from the list
3. "bantime"      (numeric, optional) time in seconds how long (or until when if [absolute] is set) the ip is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)
4. "absolute"     (boolean, optional) If set, the bantime must be a absolute timestamp in seconds since epoch (Jan 1 1970 GMT)

Examples:

> ion-cli setban "192.168.0.6" "add" 86400
> ion-cli setban "192.168.0.0/24" "add"
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "setban", "params": ["192.168.0.6", "add" 86400] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBsettxfee amount\fR


Set the transaction fee per kB.

Arguments:

1. amount         (numeric, required) The transaction fee in ION/kB rounded to the nearest 0.00000001

Result

true|false        (boolean) Returns true if successful

Examples:

> ion-cli settxfee 0.00001
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "settxfee", "params": [0.00001] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBsignmessage "ionaddress" "message"\fR


Sign a message with the private key of an address

Arguments:

1. "ionaddress" (string, required) The Ion address to use for the private key.
2. "message" (string, required) The message to create a signature of.

Result:

"signature" (string) The signature of the message encoded in base 64

Examples:

Unlock the wallet for 30 seconds
> ion-cli walletpassphrase "mypassphrase" 30

Create the signature
> ion-cli signmessage "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe" "my message"

Verify the signature
> ion-cli verifymessage "iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe" "signature" "my message"

As json rpc
> curl --user myusername --data-binary '{"jsonrpc": "1.0", "id":"curltest", "method": "signmessage", "params": ["iUUCtBZUVR98Cufh9BbSSqUPJFEtPKSLSe", "my message"] }' -H 'content-type: text/plain;' http://127.0.0.1:9998/


\fBsignrawtransaction <hex string> [{"txid":txid,"vout":n,"scriptPubKey":hex,"redeemScript":hex},...] [<privatekey1>,...] [sighashtype="ALL"]\fR


Sign inputs for raw transaction (serialized, hex-encoded).
Second optional argument (may be null) is an array of previous transaction outputs that this transaction depends on but may not yet be in the blockchain.
Third optional argument (may be null) is an array of base58-encoded private
keys that, if given, will be the only keys used to sign the transaction.
Fourth optional argument is a string that is one of six values; ALL, NONE, SINGLE or ALL|ANYONECANPAY, NONE|ANYONECANPAY, SINGLE|ANYONECANPAY.

Returns json object with keys:
  hex : raw transaction with signature(s) (hex-encoded string)
  complete : 1 if transaction has a complete set of signature (0 if not)

\fBspork <name> [<value>]\fR

<name> is the corresponding spork name, or 'show' to show all current spork settings<value> is a epoch datetime to enable or disable spork

\fBstashedsend <ionaddress> <amount>\fR

ionaddress, reset, or auto (AutoDenominate)<amount> is a real and is rounded to the nearest 0.00000001

\fBstop\fR

Stop Ion server.

\fBsubmitblock <hex data> [optional-params-obj]\fR


[optional-params-obj] parameter is currently ignored.
Attempts to submit new block to network.
See https://en.bitcoin.it/wiki/BIP_0022 for full specification.

\fBvalidateaddress <ionaddress>\fR

Return information about <ionaddress>.

\fBvalidatepubkey <ionpubkey>\fR

Return information about <ionpubkey>.

\fBverifymessage <ionaddress> <signature> <message>\fR

Verify a signed message

.SH SEE ALSO
\fBiond(1), ion-qt(1), ion-tx(1)\fR

.SH BUGS
No known bugs.
.SH AUTHOR
ckti <ckti@mail.i2p>
.SH COPYRIGHT
Copyright (C) 2009-2017 The Bitcoin Core developers

Please contribute if you find Ion Core useful. Visit
<https://ioncore.xyz> for further information about the software.
The source code is available from <https://github.com/cevap/ion>.

This is experimental software.
Distributed under the MIT software license, see the accompanying file COPYING
or <https://opensource.org/licenses/MIT>

This product includes software developed by the OpenSSL Project for use in the
OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by
Eric Young and UPnP software written by Thomas Bernard.
