.\" Manpage for ion-tx"
.\" Contact ckti@mail.i2p to correct errors or typos."
.TH man 1 "05 Jan 2018" "1.0" "ion-tx man page"
.SH NAME
ion-tx \- run an ion TX command
.SH DESCRIPTION
ion-tx runs one of a number of Transaction commands whilst the ion wallet is running. Set server=1 in ~/.ioncoin/ioncoin.conf if running ion-qt.

Usage:

.RE
\fBion-tx [options] <hex-tx> [commands]\fR
.RS 12
Update hex-encoded ion transaction

.RE

\fBion-tx [options] -create [commands]\fR
.RS 12
Create hex-encoded ion transaction\fR
.SH OPTIONS
\fB-?\fR
.IP
Display help and exit

.RE
\fB-create\fR
.IP
 Create new, empty transaction

.RE
\fB-json\fR
.IP
Select JSON output

.RE
\fB-txid\fR
.IP
Output only the hex-encoded transaction id of the resultant transaction.

.RE

\fBChain selection options:\fR

\fB-testnet\fR Use the test chain

\fBCommands:\fR
.IP
\fBdelin\fR=N
.RS 7
Delete input N from TX

\fBdelout\fR=N
.RS 0
Delete output N from TX

\fBin=\fRTXID:VOUT(:SEQUENCE_NUMBER)
.RS 0
Add input to TX

\fBtime\fR=N
.RS 0
Set TX time to N

\fBlocktime\fR=N
.RS 0
Set TX lock time to N

\fBnversion\fR=N
.RS 0
Set TX version to N

\fBreplaceable\fR=N
.RS 0
Set RBF opt-in sequence number for input N (if not provided, opt-in all available inputs)

\fBoutaddr\fR=VALUE:AD.IPSS
.RS 0
 Add address-based output to TX

\fBoutpubkey\fR=VALUE:PUBKEY[:FLAGS]
.RS 0
Add pay-to-pubkey output to TX

.RS 12
\fBOptionally\fR add the \fB"W"\fR flag to produce a pay-to-witness-pubkey-hash output
.RS 0
\fBOptionally\fR add the \fB"S"\fR flag to wrap the output in a pay-to-script-hash.;
.RE 0
.IP 
\fBoutdata\fR=[VALUE:]DATA
.RS 7
Add data-based output to TX

\fBoutscript\fR=VALUE:SCRIPT[:FLAGS]
.RS 0
Add raw script output to TX  

.RS 12
\fBOptionally\fR add the \fB"W"\fR flag to produce a pay-to-witness-script-hash output
.RS 0
\fBOptionally\fR add the \fB"S"\fR flag to wrap the output in a pay-to-script-hash.
.RE 0
.IP
\fBoutmultisig\fR=VALUE.IPQU.IPD:PUBKEYS:PUBKEY1:PUBKEY2:....[:FLAGS]
.RS 7
Add Pay To n-of-m Multi-sig output to TX. n =.IPQU.IPD, m = PUBKEYS
.RS 12
\fBOptionally\fR add the \fB"W"\fR flag to produce a pay-to-witness-script-hash output
.RS 0
\fBOptionally\fR add the \fB"S"\fR flag to wrap the output in a pay-to-script-hash.
.RE 0
.IP
\fBsign=\fRSIGHASH-FLAGS
.RS 7
Add zero or more signatures to transaction 
.IP
This command requires JSON registers:
.IP
\fBprevtxs=\fRJSON object 
.IP
\fBprivatekeys\fR=JSON object
.IP
See signrawtransaction docs for format of sighash flags, JSON objects.

.RE 0
\fBRegister Commands:\fR
.IP
\fBload\fR=NAME:FILENAME
.RS 7
Load JSON file FILENAME into register NAME

.RS 0
\fBset\fR=NAME:JSON-STRING
.RS 0
Set register NAME to given JSON-STRING
.RE
.SH EXAMPLE
.PP
.IP
.EX
To create a new, empty transaction, use the -create option to ion-tx:
Returns a hex-encoded transaction as in the following:
\fB> ion-tx -create \fR
\fB> 010000009800ee59000000000000\fR

This transaction ID is used in the next step

\fB> ion-tx -testnet -json 010000009800ee59000000000000\fR
{
    "txid": "9f6e10a949f0a14ed63cfdc8b0cd16b545fca47ad5655c61f24b90de86af8a99",
    "version": 1,
    "time": 1508769944,
    "locktime": 0,
    "vin": [
    ],
    "vout": [
    ],
    "hex": "010000009800ee59000000000000"
}

With this information the transaction time can be mutated

\fB> ion-tx -testnet -json 010000009800ee59000000000000 time=1508783244\fR
{
    "txid": "9fa096558dcecc8f345d54258c2f4b0deccbf24297721bea1b1f52bc26beef1a",
    "version": 1,
    "time": 1508783244,
    "locktime": 0,
    "vin": [
    ],
    "vout": [
    ],
    "hex": "010000008c34ee59000000000000"
}

Mutate the vin

Transaction mutation: add vin

\fB> ion-tx -testnet -json 010000008c34ee59000000000000 in=e8c01abcbfbebc062a1121ec13c3281128e69f7b7b4229ba5afcaf05efd213e3:1\fR
{
    "txid": "be4b2569b3b4d4035beb963d3f5cd2da3093839eda2936af709d2a07d67c8bc4",
    "version": 1,
    "time": 1508783244,
    "locktime": 0,
    "vin": [
        {
            "txid": "e8c01abcbfbebc062a1121ec13c3281128e69f7b7b4229ba5afcaf05efd213e3",
            "vout": 1,
            "scriptSig": {
                "asm": "",
                "hex": ""
            },
            "sequence": 4294967295
        }
    ],
    "vout": [
    ],
    "hex": "010000008c34ee5901e313d2ef05affc5aba29427b7b9fe6281128c313ec21112a06bcbebfbc1ac0e80100000000ffffffff0000000000"
}

Transaction mutation: add vout

\fB> ion-tx -testnet -json 010000008c34ee5901e313d2ef05affc5aba29427b7b9fe6281128c313ec21112a06bcbebfbc1ac0e80100000000ffffffff0000000000 outaddr=0.5279:g9oNsxyCpf9BaUTcRQuM2c9ZFc5xorajqf\fR
{
    "txid": "f9d1ac01b749b9b29560d383318bb8d9a47157f7c7d2c5cc6fe5028b81410a06",
    "version": 1,
    "time": 1508783244,
    "locktime": 0,
    "vin": [
        {
            "txid": "e8c01abcbfbebc062a1121ec13c3281128e69f7b7b4229ba5afcaf05efd213e3",
            "vout": 1,
            "scriptSig": {
                "asm": "",
                "hex": ""
            },
            "sequence": 4294967295
        }
    ],
    "vout": [
        {
            "value": 0.5279,
            "n": 0,
            "scriptPubKey": {
                "asm": "OP_DUP OP_HASH160 4cf2ed4585148f8a246a59fda07abb7d2aab44d4 OP_EQUALVERIFY OP_CHECKSIG",
                "hex": "76a9144cf2ed4585148f8a246a59fda07abb7d2aab44d488ac",
                "reqSigs": 1,
                "type": "pubkeyhash",
                "addresses": [
                    "g9oNsxyCpf9BaUTcRQuM2c9ZFc5xorajqf"
                ]
            }
        }
    ],
    "hex": "010000008c34ee5901e313d2ef05affc5aba29427b7b9fe6281128c313ec21112a06bcbebfbc1ac0e80100000000ffffffff01f0822503000000001976a9144cf2ed4585148f8a246a59fda07abb7d2aab44d488ac00000000"
}

Compare both transactions using \fBion-cli\fR to confirm that both Transaction IDs are the same

.EE
.PP
.SH SEE ALSO
\fBiond(1), ion-qt(1), ion-cli(1)\fR

.SH BUGS
No known bugs.
.SH AUTHOR
ckti <ckti@mail.i2p>
.SH COPYRIGHT
Copyright (C) 2009-2017 The Bitcoin Core developers

Please contribute if you find Ion Core useful. Visit
<https://ioncore.xyz> for further information about the software.
The source code is available from <https://github.com/cevap/ion>.

This is experimental software.
Distributed under the MIT software license, see the accompanying file COPYING
or <https://opensource.org/licenses/MIT>

This product includes software developed by the OpenSSL Project for use in the
OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by Eric Young and UPnP software written by Thomas Bernard
